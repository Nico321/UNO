package de.uno.android;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.SocketTimeoutException;
import java.util.List;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import android.os.AsyncTask;
import android.util.Log;
import biz.source_code.base64Coder.Base64Coder;
import de.uno.android.usermanagement.User;


public class AsynchronTask extends AsyncTask<Object, Object, Object> {

	private String NAMESPACE;
	private String URL;	 
	private String METHOD_NAME;
	private static final String TAG = AsynchronTask.class.getName();

	
	@Override
	protected String doInBackground(Object... params) {
		String result = null;
	try{
		System.out.println("Error0");
		if (params[0] instanceof Register | params[0] instanceof Login){
			executeSoapAction(params[0], params[1], params[2]);
		}
		if (params[0] instanceof JoinServer){
			executeSoapAction(params[0]);
		}
		return result;
	}
	catch(Exception e) {
	    e.printStackTrace();
	    return result = e.getMessage();
	   }
	
	}
	public boolean setKsoapAttributes(String NAMESPACE,String URL, String METHOD_NAME){
		this.NAMESPACE = NAMESPACE;
		this.URL = URL;
		this.METHOD_NAME = METHOD_NAME;
		
		return true;
	}
	private SoapPrimitive executeSoapAction(Object... params) throws SoapFault, SocketTimeoutException {
		SoapPrimitive result = null;
	    SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);
	    boolean success = false;
	    //for (int i=0; i<params.length; i++) {
		//    request.addProperty("arg" + i, params[i]);
	    //}

	    if (params[0] instanceof Register){
	    	request.addProperty("arg0", params[1].toString());
	    	request.addProperty("arg1", params[2].toString());
	    }
	    if (params[0] instanceof Login){
	    	request.addProperty("arg0", params[1].toString());
	    	request.addProperty("arg1", params[2].toString());
	    }
	    
	    System.out.println("Error1");

	    SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
	    System.out.println("Error2");
	    envelope.setOutputSoapObject(request);
	    System.out.println("Error3");
	    HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);
	    Log.d(TAG, "Error5");
        try {	        
		    List<HeaderProperty> reqHeaders = null;
		    @SuppressWarnings({"unused", "unchecked"})			
	    	List<HeaderProperty> respHeaders = androidHttpTransport.call("", envelope, reqHeaders);
		    System.out.println("error5");
		    
		    if(params[0] instanceof JoinServer){		    	

	            System.out.println(success);
		    	//boolean b =  (boolean) envelope.getResponse();
		    	//System.out.println(b);
		    }
		    
		    if (params[0] instanceof Login){
		    	SoapPrimitive response = (SoapPrimitive)envelope.getResponse();
	            success = Boolean.valueOf(response.toString());		    	
		    }	
		    if (params[0] instanceof Register){
		    System.out.println(envelope.bodyIn.toString());
		    SoapObject response = (SoapObject) (envelope.bodyIn);
            Log.d("GetPointsByUser - Response", response.toString().trim());
            User u = (User) deserialize(response.toString().trim());
            System.out.println(u.getUsername());
            Log.d("User", "User");

           
		    success = true;
		    }
		    
	    }
	    catch(SocketTimeoutException e){
	    	success = false;
	    	e.printStackTrace();	    	
	    }
	    catch (SoapFault e) {
	    	e.printStackTrace();
	    }
	    catch (Exception e) {
	    	e.printStackTrace();
	    }	    
	    //String s = getResult(result);
	    //System.out.println(s);
	    if(params[0] instanceof Register){
	    	Register r = (Register) params[0];
	    	r.registartionCompleted(success);
	    	
	    }
	    if(params[0] instanceof Login){
	    	Login l = (Login) params[0];
	    	l.loginCompleted();
	    }
	    if(params[0] instanceof JoinServer){
	    	JoinServer j = (JoinServer) params[0];
	    	j.showOpenGamesCompleted(success);
	    }
	    return result;
	}
	private String serialize(Serializable o){
    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos;
		try {
			oos = new ObjectOutputStream( baos );
			oos.writeObject( o );
			oos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

        return new String( Base64Coder.encode( baos.toByteArray() ) );
    }
    
	private static Object deserialize(String s){
		byte [] data = Base64Coder.decode( s );
        ObjectInputStream ois;
        Object o = null;
		try {
			ois = new ObjectInputStream( 
			                                new ByteArrayInputStream(  data ) );
	        try {
				o  = ois.readObject();
			} catch (ClassNotFoundException e) {
				System.out.println("er6");
				e.printStackTrace();
			}
	        ois.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
        return o;
	}
	
}